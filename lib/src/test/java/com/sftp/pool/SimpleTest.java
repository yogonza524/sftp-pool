/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.sftp.pool;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.SftpException;
import com.pastdev.jsch.DefaultSessionFactory;
import com.pastdev.jsch.SessionManager;
import com.sftp.pool.factory.ChannelSftpConnectionsFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.UUID;
import java.util.stream.IntStream;
import org.apache.commons.pool2.ObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.junit.jupiter.api.Test;

class SimpleTest {
  @Test
  void shouldConnectAndUploadAFileTenTimesToSFTPAtDockerLocal() throws URISyntaxException {
    // Number of uploads (performance)
    int times = 10;

    DefaultSessionFactory sessionFactory = new DefaultSessionFactory();
    sessionFactory.setHostname("127.0.0.1");
    sessionFactory.setUsername("demo");
    sessionFactory.setPassword("demo");
    sessionFactory.setConfig("StrictHostKeyChecking", "no");

    SessionManager sm = new SessionManager(sessionFactory);
    ObjectPool<ChannelSftp> pool =
        ChannelSftpConnectionsFactory.createPool(sm, new GenericObjectPoolConfig<>());

    // Get file from resources
    URL res = getClass().getClassLoader().getResource("to_upload.txt");
    File file = Paths.get(res.toURI()).toFile();

    IntStream.range(0, times)
        .forEach(
            i -> {
              System.out.println("iteration: " + i);
              ChannelSftpConnectionsFactory.execute(
                  pool,
                  sftp -> {
                    try {
                      sftp.put(
                          new FileInputStream(file),
                          String.format(file.getName() + "-%s", UUID.randomUUID()),
                          ChannelSftp.OVERWRITE);
                    } catch (SftpException e) {
                      e.printStackTrace();
                    } catch (FileNotFoundException e) {
                      e.printStackTrace();
                    }
                  },
              e -> {
                e.printStackTrace();
              });
        });
  }
}
